day9
인터페이스 - 추상메소드를 이용하여 클래스에게 규칙(기능)을 여러가지 만들어줌(다중 인터페이스구현)

업캐스팅과 다운캐스팅 방식은 클래스의 상속 방식과 동일

Animal cat= new Cat =--> 앞 뒤 클래스가 다른 경우 상속 받아서 부분 클래스이던가, 
List<T> list = new ArrayList<>(); -> 규칙을 이용한 인터페이스던가
1.부모클래스 2.인터페이스

업캐스팅이 쓰이는 곳 - >메소드 인자(주로), 리턴 타입(드물게)에 사용하며 다형성 구현
상속은 추상클래스에서 많이 쓰임


람다식은 메서드가 1개일때만 사용 가능 ( 이름과 기능이 동일하기에)

//재정의 해야할 메소드가 1개 입니다. BeAble 인터페이스의 추상메소드가 1개입니다.
// ㄴ함수형 인터페이스: 익명클래스를 '람다식'으로도 정의할 수 있습니다. (람다식-줄여쓰자)
        BeAble beAble = new BeAble() {
            @Override
            public String beAble(){
                return "무엇이든 합니다~"; } };
     
람다식에서는 메소드의 인자()표기 -> {}메소드 몸통에 추상메소드 구현부분작성 // 화살표도 반드시
        BeAble beAble2 = () -> {
            return "무엇이든 합니다~"; };

        //자바스크립트(웹)에서는 화살표함수로 같은 형식으로 사용됩니다. .

//함수형 인터페이스 정의
//인터페이스 중에 *추상메소드가 1개인 것*은 다른 프로그래밍 언어에서 사용되는 `함수` 의 형식으로 표현할 수 있습니다.
//      함수와 메소드 공통점은 인자와 리턴값이 있다는 것. 다른 점은 메소드는 클래스(또는 객체)에 구성요소로 포함.

//자바 라이브러리에는 인자의 형식과 개수와 리턴 타입 등 여러 유형에 따라 Consumer, Producer(자바8까지 이후 Supplier), Function, Predicate 등의
//      함수형 인터페이스가 미리 정의되어 있습니다.
@FunctionalInterface         //함수형 인터페이스에 사용합니다. 애노테이션이라는 주석으로 `코드를 체크하는 기능`을 합니다.





Integer arr[] = {4,23,33,15,17,19};           ->int가 아니라 Integer 타입으로만들어야함
 Arrays.sort(arr,Collections.reverseOrder()); 

CompareTo (나와 다른객체)
Compare(객체 두개 비교)

// o1(오른쪽), o2(왼쪽)이며 오름/내림 상관없이 교환을 안해도되는 경우를 음수값으로 리턴함
//sort 메소드 정렬 알고리즘은 비교결과 음수 리턴하면 교환하지 않고 양수리턴하면 교환함

//2-3=-1<0 교환하지 않음
//o2-o1<0이면 교환하지 않습니다


Comparator는 <> 제너릭타입에 기본형을 사용못함. Wrapper클래스 사용(Integer)



-------------

목적: 1. 자바스터디
	2. 자바와 오라클(db) 연동 간단한 미니 프로젝트 만들기
	(추후 3일 가량 시간 줄 예정)

기간: ~2/16

다른조 리더 - 이광원, 임현범 , 한진만


조 
노희영
민찬희
이대환
이재훈
김승한

partB 프로젝트의 내용
조별로 5~6명이 각각 분담해서 문제 내보기
1명당 5문제



day+배열
ox, 단답식, 코딩, 객관식






        Arrays.sort(students, (o1, o2)) ->{
	return  o1.getGrade()- o2.getGrade();
     }};




