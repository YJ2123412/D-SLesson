상속은 오직 한개의 클래스만
인터페이스는 여러개 가능

this는 자기자신
super는 부모 변수

오버라이드할 때도 super라고 정확히 명시해야함

*****오버라이드 중요
업캐스팅: 자식 클래스에서 부모타입 참조
다운캐스팅:부모객체로 참조하고 있던 것을 다시 자식 객체로 참조하는 것

-UpCasting
Shape sh = new Diamond(); // 실제객체:다이아몬드
-DownCasting - sh의 실제 객체가 다운캐스팅하려는 타입인지 검사 필수 - instanceof 연산으로 검사
                sh의 실제 객체가 아닌 것(Triangle, Square)을 Diamond로 캐스팅하면 오류Diamond diamond = (Diamond)sh;

Diamond.java
  //자식클래스가 정의한 인스턴스메소드 - diamond 타입으로 선언한 참조변수만 실행할 수 있음
  public void iAmDiamond(){
    System.out.println("나는 다이아몬드~ 반짝반짝");

Main
	Shape sh = new Diamond()
      Diamond diamond = (Diamond)sh;
      //자식 객체의 인스턴스 메소드iAmDiamond는 반드시 다운캐스팅을 해야 실행 가능
      diamond.iAmDiamond();


--------------------
Integer.toHexString - >16진수로 바꿔줌

마우스 오른쪽+ 소스액션-> toString 누르면 오버라이드로 만들어줌


컨트롤+방향키 - >옆칸으로 이동


접근한정자가 없는 경우 = default ->거의 사용하지 않음
프라이빗->은닉성
상속에서는 protected가 편함

this 는 객체(인스턴스 필드와 인스턴스 메소드)만 O, TYPE에는 X


public abstract class Animal {
 추상메소드: 자식 클래스들이 공통적으로 가져야할 기능
 자식 클래스들이 반드시 재정의하도록 강요
 추상 메소드가 있는 클래스는 반드시 abstract class로 정의하기
 메소드의 실행내용은 없고 선언만. 부모는 자식을 위한 형식만 정의(추상화)
	//부모가 추상화시킨 클래스를 자식이 실체화
부모클래스 이름으로는 객체 생성 불가능 -(추상일 경우)
public abstract void sound();
	

//toString을 재정의 하지 않으면 부모 toString이 실행되고 부모의 TYPE 상수값 출력
	//static 필드 또는 메소드는 객체의 특징이 적용되지 않음





if문

if-else if로 이어지는경우 숫자 순서대로하면 앞의 내용을 자동으로 포함하는 관계가 됨


----
생성자 정의가 없으면 - 기본생성자 , 그리고 자동으로 부모 생성자 super()호출,
자식객체가 생성될때, 먼저 부모객체를 생성, 자식 인스턴스 요소 추가
이때 부모생성자는 super()이 기본 - 생략O

break는 첫번째로 null을만나면 정지, continue는null을 만나면 다음명령어를 실행하지않고
			//for i++문부터 다시 시작


//정리: 상속은 단일 상속, 인터페이스 구현은 다중구현, 인터페이스는 규칙을 주는 것
//인터페이스는 객체생성 못함
        //단 익명 내부 타입으로 정의는 가능



메소드는  *1)추상메소드(public abstract 생략함.) 
//         ,2)인스턴스(default)메소드 
//          3)static메소드 
//          4)상수 
//	        = 모두 public, 4가지만 포함 가능



업캐스팅 또는 다운캐스팅 목적은 상속과 같은 방식으로 사용할 수 있음

업캐스팅:  다형성목적. 업캐스팅 타입이 갖는 메소드만 실행 
다운캐스팅: 업캐스팅 타입이 갖는 추상메소드가 아닌 다른메소드 실행하기 위함
