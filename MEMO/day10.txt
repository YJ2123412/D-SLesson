day10

추상메소드 - abstract, public 생략 가능
상수 - abstract, public, final 생략가능
정적 - public 생략가능, static 생략 불가능
default 꼭 재정의 안해도 괜찮음(다른 추상메소드의 경우 사용하고 있는 클래스에서 재정의 해줘야만 함)

다형성의 정의


비교
comparator - Java.util package에 있는 인터페이스
comparable - Java.lang에 있는 인터페이스 ->반드시 compareTo(<T> e)를 구현해야
charsequence- 인터페이스 - CharSequence subsequence(int start, int end) : start부터 end까지의 문자를 반환

제너릭 타입 - 데이터 타입을 매개변수로 넘기기 위한 방법
ㄴ기본형x wrapper 클래스 O



-LIst
List 구현 클래스 특징: 배열처럼 인덱스를 가짐
 * 배열에 없는 삭제기능이 있음+ 조회기능

addAll 항목 중복 추가 후 리스트: "+ strlist); ->중복값 허용
/contains
addAll
 System.out.println("\n\n리스트에서 항목 찾기");
        System.out.println("\t 리스트에 처음 `아이브` 어디 있음? " + strlist.indexOf("아이브"));
        System.out.println("\t 리스트에 마지막 `아이브` 어디 있음? " + strlist.lastIndexOf("아이브"));
        System.out.println("\t 리스트에 `뉴진스` 있음? " + strlist.contains("뉴진스"));
        System.out.println("\t 리스트에 `뉴진스` 어디 있음? " + strlist.indexOf("뉴진스"));

  //new Member("momo",23)에서 인스턴스 필드값이 같다고 동일한 객체가 아님. remove, indexOf등의 메소드는 동일한 객체를 찾아서 삭제하거나 조회함
        //참고:String은 문자열 리터럴이 같으면 주소가 같음(불변객체)
        //일반적으로 만들어진 클래스는 hashcode로 메모리의 참조위치가 결정됨
            //인스턴스 필드 내용이 같으면 hashcode를 동일하게 만들도록 재정의


중요! 객체의 동일성(같은 객체)을 검사하기 위해서 hascode와 equals를 오버라이드(재정의)해야 함
->해시코드 값이 같고 인스턴스 필드의 내용이 같으면 동일한 객체다
hashCode-인스턴스 필드 값이 같으면 같은 주소를 만들어줌
 //인스턴스필드값으로 해시코드 생성: name.hashcode() 와 age 정수값으로 계산
       

equals-필드값이 같은가?
  대상이되는 obj와 현재 this 객체의 인스턴스 필드값이 모두 같은지 검사
     
일반 멤버클래스는 생성될때 초기화하면 변경 못함(set 설정 X)
//hashcoce, equals를 재정의 -> 이러한 객체를 VO(value Object)라 부름


Member momo = new Member("momo", 23);
list.add(momo);

list.add(new Member("momo", 23));

->둘이 같음, 아랫줄의 경우 선언과 값의 입력을 동시에 할 수 있기에 간편함




sort - static메소드
배열에는 메소드가 없음 ->Arrays.sort로 바로 사용 가능


----

list 
List<Member> list = new ArrayList<>(); -> 타입이 Member 타입이기에 Comparator를 구현해야함
List<Integer> list =  new ArrayList<>(); -> 타입이 정수이기에 list.sort(null) 만으로도 정렬할 수 있음

정수, 실수, 문자열 타입은 list.sort(null)로 오름차순 정렬, 그 이외에는 comparator를 구현해야함
comparator를 만든 후 @Override로 만들어서 return으로 순서를 정함(오름차, 내림차)


list의 static 메소드
테스트용 리스트 만들때 주로 사용.. (불변객체임)
            List<String> names = List.of("momo","dahy","nana");
            System.out.println("names: "+names);


Member temp = list.get(i); - 인덱스 호출방법.. Member 타입...

            System.out.println(String.format("%15s\t %15d", temp.getName(),temp.getAge()));
            System.out.println(String.format("%15s\t %15d", list.get(i).getName(),list.get(i).getAge()));

----------------------------------------------------------------------------

        //컬렉션에서는 반복자(Iterateor)로 데이터에 접근
        //반복자를 이용한 출력
        System.out.println("~~~~~~~~~반복자를 이용한 출력~~~~~~~~~~~~~");
        java.util.Iterator <Member> iterator = list.iterator(); //리스트로 선언된 자료구조에 접근할 반복자 선언
        int count =0;
        while (iterator.hasNext()) {    //반복자가 접근할 다음 데이터가 있으면 참
            Member temp = iterator.next();//반복자가 다음 데이터를 가져옴
            System.out.println("\t count "+ count++ + ",요소=" +temp);
            
        }
        System.out.println("~~~~~~~~~iterator로 for 출력~~~~~~~~~~~~~");
        for (Member temp : list) {
            System.out.println("\t count "+ count++ + ",요소=" +temp);
            
        }


본래의 set은 순서가 없으므로 무작위 접근
Linked는 다음 입력데이터의 참조값을 저장하여 입력순서대로 접근

 Set<String> set3 = new TreeSet<>();
 이진트리 알고리즘을 이용하여 데이터를 정렬된 방식으로 접근
        
 set인덱스 없습니다, for i 와 같은방식은 불가

--------------
 //map<k,v>: key 값으로 value 를 가져오기.. 
key와 value는 모든 타입 object입니다.
 key는 중복 불가, k와 v 둘 다 순서 없음
        //key는 set의 특성을 지님
        //맵에 입력한 순서대로 접근해야 한다면 linkedHashMAp 또는 정렬(key기준)된 방식으로 접근해야한다면 TreeMap
    Map<String,String> map = new LinkedHashMap<>(); //key값 중복시 value만 남음. 없는셈..
key값으로 반복자를 생성

key와 value를 한쌍으로 만든 타입이 Entry


string(key) +  javaword(value) =합쳐서 MAP
 
스트링으로 꺼내면 밸류가 알아서 다 나옴. 출력할때도 밸류만 출력하면 됨




















