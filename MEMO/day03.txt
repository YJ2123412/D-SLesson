2024.01.02
DAY3

과제는 폴더 만들지 말고 바로 올리기

*입력->처리->출력의 과정을 항상 생각하자.
문자열 메소드에도 입력, 출력을 생각해볼 수 있음.
입력은 메소드의 인자, 출력은 메소드의 리턴
단, message.charAt(1)을 예시로 하면 message(String 클래스)는 메소드의 실행 주체(주인). 
(주체 표현시  ' . '을 꼭 찍음)
그리고 리턴이 없는 메소드가 있을 수 있으며, 그때는 void로 표시

변수는 메모리에 저장됨

flow chart: 프로그래밍을 위해 처리과정을 설명하는 그림


논리연산 : &&(그리고), ||(또는,버티컬), !(앤퍼선드, not)

이모지 출력: 터미널 창에 chcp 65001 (윈도우 명령창 인코딩을 유니코드 UTF-8로 변경)

-조건식 ? 참 : 거짓일때 실행하는 명령 혹은 값 -->연산부분이 3가지. 즉, 삼항연산
System.out.println("고객님의 최종 포인트는 " + (point >=150? (point+=200) : (point+=100)) + " 입니다."); 




int max; 선언만 하는 것도 가능
int n1= 23,  n2= 34, n3 =32; 이어서 선언 가능
선언 후 변경할때는 ' , ' 대신 ' ; '로 이어서 적기 가능
  n1=99; n2=88; n3 =77;

삼항연산자 - > 출력문, 대입문.. 사용 가능
max = n1>n2? n1:n2;
max = max<n3? n3: max;



컨트롤+. -> 오류수정

참 또는 거짓일때 실행하는 명령문이 1개이면{}생략하고 할 수 있음
if(min>n3) min=n3; 




for 끝을 알면..
while 끝을 알기 어려울떄
        int k = 0;
        while(k<message.length()){
            char temp = message.charAt(k);
            System.out.println("k="+(k++)+",문자 = "+temp);
            //k++;
        } - (출력문 안에서 ++로 늘려가면서 가능)


char 비교는 ==

문자열은 0부터 문자의 위치를 나타내는 인덱스가 순서대로 부여됨

if문.. 위에서 걸러진 부분들은 계속 제외됨, 고려 x.. 
if(jumsu>=90){
 grade = "A";	
} else if(jumsu>=80){
 grade = "B";
} else if(jumsu>=70){
 grade = "C";
} else if(jumsu>=60){
 grade = "D";
}  else {
 grade = "F";
}	

return: 결과를 반환, 프로그램 종료

--
세자리마다 컴마찍기
DecimalFormat df = new DecimalFormat("#,### 원"); - 한글도 넣을 수 있음
df.format(balance)



git commit -m "설명 or 내용적기"

