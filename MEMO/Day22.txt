Day22

변수 vo 대신 map 을 사용하기도 함


executeUpdate 메소드는 insert,update, delete가 정상실행(반영된 행이 있으면)되면 1을 리턴.
특히 update나 delete는 조건에 맞는 행이 없어 반영되지 않으면 0을 리턴

------------
같은 코드
BuyVo bv = new BuyVo(0, userId, pcode, buyquantuty, null);
buyDao.buy(bv);

-맵사용예시
Map<Integer,Integer> arg = new HashMap<>();
arg.put("buyidx", changeidx);
arg.put("quantity", changNumber);
buyDao.modify(arg);


public int modify(Map<String ,Integer> arg){
        String sql ="UPDATE TBL_BUY SET QUANTITY = ? WHERE BUY_IDX = ?";
        int result =0;

        try (Connection connection = getConnection();      
            PreparedStatement pstmt = connection.prepareStatement(sql);){
            pstmt.setInt(1, arg.get("quantity"));
            pstmt.setInt(2, arg.get("buyidx"));
            result = pstmt.executeUpdate();
        } catch (SQLException e) {
            System.out.println("구매수량변경 실행 예외 발생 : " + e.getMessage());
        } return result;
    }
--------------------------------

-Map<String,Integer> ->키워드가 String, 넣을 값이 int
arg.put("quantity", changNumber);


다른 클래스의 상위 클래스로 상속 관계를 만들 수 있다.
ㄴ 단,  main 메소드도 제거하고 인스턴스 메소드는 pivate 이외 다른  접근 한정자로 해야합니다.   


batch(배치)는 일괄처리: 실행할 insert, update, delete 등의 데이터 저장 DML을 여러개 모아두었다가 한번에 실행시킴

트랜젝션: 특정 요구사항에 대한 기능을 실행할 여러 SQL 명령들로 구성된 작업 단위ㄴ
트랜잭션 commit 모드가 auto에서 수동으로 변경 - connection.setAutoCommit(false);
예시: 카트에 저장된 상품중 하나라도 참조값이 없는 pcode가 있으면 rollback, 모두 정상이면 commit

pstmt.addBatch();  sql을 메모리에 모아두기 -> 매개변수가 다른 것들을 각각 저장

 pstmt.executeBatch();   //sql 일괄실행
예외발생: 트랜젝션 처리, 실행 중 무결성 오류 생기면 catch에서 rollback, 정상실행시 commit


-모아두기 코드
for(BuyVo vo:cart){
  pstmt.setString(1, vo.getCUSTOMID());
  pstmt.setString(2, vo.getPCODE());
  pstmt.setInt(3, vo.getQUANTITY());
  pstmt.addBatch(); 
  count++;
  }
pstmt.executeBatch();   //sql 일괄실행
connection.commit();





public int insertMany (List<BuyVo> cart){ //여러번의 (cart 크기)만큼 insert 실행
    String sql = "insert into tbl_buy(BUY_IDX, CUSTOMID, PCODE, QUANTITY, BUY_DATE)" +
    "VALUES(buy_pk_seq.nextval, ?, ?, ? , sysdate)";
    int count =0;
    Connection connection=null;
    PreparedStatement pstmt=null;
    try {connection = getConnection();       //auto close
        pstmt = connection.prepareStatement(sql);
        connection.setAutoCommit(false);  //※auto commit 해제
            for(BuyVo vo:cart){
                pstmt.setString(1, vo.getCUSTOMID());
                pstmt.setString(2, vo.getPCODE());
                pstmt.setInt(3, vo.getQUANTITY());
                pstmt.addBatch(); // sql을 메모리에 모아두기, insert sql에 대입되는 매개변수 값이 매번 다름
                count++;
                }
                pstmt.executeBatch();   //sql 일괄실행
                connection.commit();
        } catch (SQLException e) { //예외발생: 트랜젝션 처리, 실행 중 무결성 오류 생기면 catch에서 rollback,
            try {                   //정상실행시 commit
                connection.rollback();
            } catch (Exception e1) {}
            count= -1;  //어차피 결제 못했으니 카운트를 다시 줄임
            System.out.println("구매 불가능한 상품이 있습니다.");
            System.out.println("장바구니 구매 실행 예외 발생 : " + e.getMessage());
         }finally{  //자원 해제
            try{    //트랜젝션 처리를 위해 connection을 사용해야 하므로 직접 close
                pstmt.close();
                connection.close();
            }catch (Exception e1) {}
        }
    return count;
}






쉬프트+탭 ->뒤로 당김

프로시저 : 메소드.. sql19번 선언, 20번 실행 예제

음수-> 실패 값...

콘솔창에 복붙-> shift+insert


지역변수- > 초기값을 주기(0, null)
전역변수 - > 상관 X

toString 재정의 시 super의 값을 따로 주지는 않음... 흩어져서 재정의해도 ㄱㅊ
set 가능한 사용하지 않기.. (요구사항이 없다면)
무결성= 값에 결함이 없다.. (참조값의 무결성 오류-> 없어...)

